{"version":3,"sources":["components/MovieCard.js","components/MovieSearch.js","App.js","reportWebVitals.js","index.js"],"names":["MovieCard","movie","className","src","poster_path","alt","title","release_date","vote_average","MoviesSearch","useState","query","setQuery","movies","setMovies","searchMovie","e","a","preventDefault","endpoint","fetch","res","json","data","results","console","log","onSubmit","htmlFor","type","name","id","placeholder","onChange","target","value","filter","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAEe,SAASA,EAAT,GAA6B,IAATC,EAAQ,EAARA,MAClC,OACC,sBAAKC,UAAU,OAAf,UACE,qBACGA,UAAU,cACVC,IAAG,0DAAqDF,EAAMG,aAC9DC,IAAKJ,EAAMK,MAAQ,WAEtB,sBAAKJ,UAAU,UAAf,UACD,mBAAGA,UAAU,cAAb,SAA4BD,EAAMK,QAClC,4BAAG,mDAAsBL,EAAMM,kBAC/B,4BAAG,6CAAgBN,EAAMO,wBCVb,SAASC,IAAgB,IAAD,EACZC,mBAAS,IADG,mBAC/BC,EAD+B,KACxBC,EADwB,OAEVF,mBAAS,IAFC,mBAE/BG,EAF+B,KAEvBC,EAFuB,KAIhCC,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACnBD,EAAEE,iBACIC,EAFa,kHAEyGR,EAFzG,iDAKMS,MAAMD,GALZ,cAKNE,EALM,gBAMQA,EAAIC,OANZ,OAMNC,EANM,OAOZT,EAAUS,EAAKC,SAPH,kDASlBC,QAAQC,IAAR,MATkB,0DAAH,sDAejB,OAFAD,QAAQC,IAAIb,GAGX,gCACC,uBAAMc,SAAUZ,EAAhB,UACC,uBAAOa,QAAQ,QAAf,wBACA,uBACCC,KAAK,OAAOC,KAAK,QACjBC,GAAG,cACHC,YAAY,sBACZC,SAAU,SAAAjB,GAAC,OAAIJ,EAASI,EAAEkB,OAAOC,UAElC,+CAED,qBAAKjC,UAAU,YAAf,SACGW,EAAOuB,QAAO,SAAAnC,GAAK,OAAIA,EAAMG,eAAaiC,KAAK,SAAApC,GAAK,OAAI,cAACD,EAAD,CAA0BC,MAAOA,GAAjBA,EAAM8B,Y,MChBrEO,MAff,WAOE,OACE,sBAAKpC,UAAU,YAAf,UACE,oBAAIA,UAAU,QAAd,8BACA,cAAC,EAAD,QCFSqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.79b2c461.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function MovieCard({movie}) {\r\n\treturn(\r\n\t\t<div className=\"card\">\r\n\t\t  <img \r\n\t\t     className=\"card--image\" \r\n\t\t     src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movie.poster_path}`}\r\n\t\t     alt={movie.title + 'poster'}\r\n\t\t    />\r\n\t\t  <div className=\"content\">\r\n\t\t\t<p className=\"card--title\">{movie.title}</p>\r\n\t\t\t<p><small>RELEASE DATE: {movie.release_date}</small></p>\r\n\t\t\t<p><small>RATING: {movie.vote_average}</small></p>\r\n\t\t\t{/* <p className=\"description\">{movie.overview}</p> */}\t\r\n\t\t  </div>\r\n\t\t</div>\t\r\n\t);\r\n}","import React, {useState} from 'react';\r\nimport MovieCard from './MovieCard';\r\n\r\nexport default function MoviesSearch() {\r\n\tconst [query, setQuery] = useState('');\r\n\tconst [movies, setMovies] = useState([]);\r\n\r\n\tconst searchMovie = async (e) => {\r\n\t\te.preventDefault();\r\n\t\tconst endpoint = `https://api.themoviedb.org/3/search/multi?api_key=929bd70144cab5f478871bf2f00ec778&language=en-US&query=${query}&page=1&include_adult=false`;\r\n\r\n\t\ttry {\r\n\t        const res = await fetch(endpoint);\r\n\t        const data  = await res.json();\r\n\t        setMovies(data.results);\r\n\t    }catch(err) {\r\n\t\t\tconsole.log(err);\r\n\t    }\r\n\t}\r\n\r\n\tconsole.log(movies)\r\n\t\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<form onSubmit={searchMovie}>\r\n\t\t\t\t<label htmlFor=\"query\">movie name</label>\r\n\t\t\t\t<input \r\n\t\t\t\t\ttype=\"text\" name=\"query\" \r\n\t\t\t\t\tid=\"searchQuery\" \r\n\t\t\t\t\tplaceholder=\"i.e game of thrones\"\r\n\t\t\t\t\tonChange={e => setQuery(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t<button>search</button>\r\n\t\t\t</form>\r\n\t\t\t<div className=\"card-list\">\r\n\t\t\t\t{ movies.filter(movie => movie.poster_path).map( movie => <MovieCard key={movie.id} movie={movie}/>)}\r\n\t   \t\t</div>\r\n\t   </div>\r\n\t);\r\n}","import React from 'react';\nimport MovieSearch from './components/MovieSearch';\nimport './App.css';\n\nfunction App() {\n{/* \n  1. dont search anything if input field is empty\n  2. give user a msg if there are no movie results\n  3. add a watchlist where user can add their search\n  4. add a btn show description \n*/}\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">Movie search app</h1>\n      <MovieSearch />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}